#!/bin/bash

# MCP Server Management Script
# Configures all MCP servers at user level for cross-project availability

set -e

echo "ðŸ”§ MCP Server Management Tool"
echo "============================"
echo

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

print_info() {
    echo -e "${BLUE}â„¹${NC} $1"
}

# Function to add MCP server with error handling
add_mcp_server() {
    local name="$1"
    local command="$2"
    shift 2
    local args=("$@")
    
    print_info "Adding MCP server: $name"
    
    if claude mcp add "$name" "$command" "${args[@]}" -s user; then
        print_status "Successfully added $name"
    else
        print_error "Failed to add $name"
        return 1
    fi
}

# Function to read MCP servers from config.json
read_config() {
    local config_file="${1:-$(dirname "$0")/config.json}"
    
    if [[ ! -f "$config_file" ]]; then
        print_error "Config file not found: $config_file"
        return 1
    fi
    
    print_info "Reading configuration from: $config_file"
    echo "$config_file"
}

# Function to setup all MCP servers from config.json
setup_mcp_servers() {
    echo "Setting up MCP servers at user level..."
    echo
    
    local config_file=$(read_config)
    if [[ -z "$config_file" ]]; then
        return 1
    fi
    
    local success_count=0
    local total_count=0
    
    # Parse config.json and setup each server
    while IFS= read -r server_name; do
        if [[ -n "$server_name" && "$server_name" != "null" ]]; then
            ((total_count++))
            
            local command=$(jq -r ".mcpServers.\"$server_name\".command" "$config_file")
            local args_json=$(jq -r ".mcpServers.\"$server_name\".args | @json" "$config_file")
            local args=()
            
            # Parse args array from JSON
            while IFS= read -r arg; do
                args+=("$arg")
            done < <(echo "$args_json" | jq -r '.[]')
            
            print_info "Setting up server: $server_name"
            if add_mcp_server "$server_name" "$command" "${args[@]}"; then
                ((success_count++))
            fi
            echo
        fi
    done < <(jq -r '.mcpServers | keys[]' "$config_file")
    
    echo "============================"
    print_info "Setup complete: $success_count/$total_count servers configured"
    echo
}

# Function to list current MCP servers
list_mcp_servers() {
    echo "Current MCP server configuration:"
    echo "================================"
    claude mcp list
    echo
}

# Function to remove all MCP servers
remove_all_servers() {
    echo "Removing all MCP servers..."
    
    # Get list of current servers
    local servers=($(claude mcp list | cut -d':' -f1))
    
    for server in "${servers[@]}"; do
        print_info "Removing $server"
        if claude mcp remove "$server" -s user 2>/dev/null; then
            print_status "Removed $server"
        else
            print_warning "Could not remove $server (may not exist)"
        fi
    done
    echo
}

# Function to backup current configuration
backup_config() {
    local backup_file="mcp_backup_$(date +%Y%m%d_%H%M%S).txt"
    print_info "Backing up current MCP configuration to $backup_file"
    
    echo "# MCP Server Backup - $(date)" > "$backup_file"
    echo "# Generated by MCP Management Tool" >> "$backup_file"
    echo >> "$backup_file"
    claude mcp list >> "$backup_file"
    
    print_status "Backup saved to $backup_file"
    echo
}

# Function to check MCP server status
check_status() {
    echo "Checking MCP server processes..."
    echo "==============================="
    
    # Check for running MCP processes
    local mcp_processes=$(ps aux | grep -E "(mcp-server|mcp_server)" | grep -v grep || true)
    
    if [ -n "$mcp_processes" ]; then
        print_status "Found running MCP processes:"
        echo "$mcp_processes"
    else
        print_warning "No MCP server processes found running"
    fi
    echo
}

# Main menu function
show_menu() {
    echo "MCP Server Management Options:"
    echo "1. Setup all MCP servers"
    echo "2. List current servers"
    echo "3. Remove all servers"
    echo "4. Backup current configuration"
    echo "5. Check server status"
    echo "6. Exit"
    echo
}

# Main script logic
main() {
    while true; do
        show_menu
        read -p "Choose an option (1-6): " choice
        echo
        
        case $choice in
            1)
                setup_mcp_servers
                ;;
            2)
                list_mcp_servers
                ;;
            3)
                read -p "Are you sure you want to remove all MCP servers? (y/N): " confirm
                if [[ $confirm =~ ^[Yy]$ ]]; then
                    remove_all_servers
                else
                    print_info "Operation cancelled"
                fi
                echo
                ;;
            4)
                backup_config
                ;;
            5)
                check_status
                ;;
            6)
                print_info "Goodbye!"
                exit 0
                ;;
            *)
                print_error "Invalid option. Please choose 1-6."
                echo
                ;;
        esac
    done
}

# Check if running with arguments
if [ $# -eq 0 ]; then
    main
else
    case "$1" in
        setup)
            setup_mcp_servers
            ;;
        list)
            list_mcp_servers
            ;;
        remove)
            remove_all_servers
            ;;
        backup)
            backup_config
            ;;
        status)
            check_status
            ;;
        *)
            echo "Usage: $0 [setup|list|remove|backup|status]"
            echo "Or run without arguments for interactive mode"
            exit 1
            ;;
    esac
fi